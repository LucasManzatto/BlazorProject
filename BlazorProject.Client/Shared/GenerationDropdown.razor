@using BlazorProject.Shared.DTO
@inject IUriHelper UriHelper
@inject HttpClient Http
@inherits RealmComponent<BlazorProject.Client.Redux.State>

@{
    var filteredItems = FilteredItems(SearchInput);
}
<div class="dropdown">
    <input class="form-control dropdown-toggle"
           type="text"
           data-toggle="dropdown"
           value=@SearchInput
           placeholder=@(Items.Count > 0 ? "Gen " + GenNumber : "Loading...") 
           @oninput=@(ui => SearchInput = (string) ui.Value) />

    <div class="dropdown-menu" style='max-height: 200px; overflow: auto; left: initial; @(filteredItems.Count == 0 ? "display:none;" : "")' aria-labelledby="@GenNumber">
        @if (filteredItems.Count == 0)
        {
            <div class="row justify-content-center align-content-center">
                <div class="col">
                    <span class="text-center">No Match.</span>
                </div>
            </div>
        }
        @foreach (var item in filteredItems)
        {
            <button @onclick="@(() => SetPokemon(item))"
                    class="dropdown-item"
                    type="button">
                @item.Id - @item.Name
            </button>
        }
    </div>
</div>


@code {
    List<DropdownPokemon> Items { get; set; } = new List<DropdownPokemon>();

    [Parameter]
    public int GenNumber { get; set; } = 1;

    public string SearchInput { get; set; } = "";


    protected override async Task OnInitAsync()
    {
        Items = await Http.GetJsonAsync<List<DropdownPokemon>>($"api/Generation/{GenNumber}/pokemons");
    }

    private void SetPokemon(DropdownPokemon item)
    {
        SearchInput = item.Name;
        UriHelper.NavigateTo($"pokemon/{item.Id}");
        //var pokemon = await Http.GetJsonAsync<FullPokemon>($"api/Pokemons/{item.Id}");
        //Dispatch(new Redux.Actions.Pokemon.Set(pokemon));
    }

    private List<DropdownPokemon> FilteredItems(string input)
    {
        return input == "" ? Items
            : Items.FindAll(p => p.Name.ToUpperInvariant()
                .Contains(input.ToUpperInvariant()) ||
                                 p.Id.ToString()
                                     .Contains(input));
    }

}