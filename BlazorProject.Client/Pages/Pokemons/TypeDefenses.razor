@using BlazorProject.Shared.DTO
@using BlazorProject.Client.Shared.Utils
<h2 class="text-center">Type Defenses</h2>
<div class="row justify-content-center">
    <div class="col-9">
        <div class="row no-gutters">
            @foreach ((KeyValuePair<string, string> type, Int32 index) in Colors.TypesList.Select((type, index) => (type, index)))
            {
                var efficacy = GetEfficacy(type.Key);
                var efficacyColor = GetEfficacyColor(efficacy);
                <div class="col">
                    <button class="pokemon-type"
                            style="background-color:@type.Value; width:40px" 
                            type="button">@type.Key.Substring(0, 3)
                    </button>
                    @if (efficacy != 1)
                    {
                        <button class="pokemon-type"
                                style="background-color:@efficacyColor; width:40px;"
                                disabled
                                type="button">
                            @efficacy
                        </button>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
[Parameter]
public ICollection<TypeEfficacy> TypeEfficacies { get; set; }

private float GetEfficacy(string damageType)
{
    var efficacies = TypeEfficacies.Where(p => p.DamageType.Name.Equals(damageType));
    var calculatedTypeEfficacy = efficacies
        .ToList()
        .Aggregate(1, (float acc,TypeEfficacy p) => acc * (((float) p.DamageFactor)/100));
    return calculatedTypeEfficacy;
}
private string GetEfficacyColor(float efficacy)
{
    switch (efficacy)
    {
        case 0:
            return "black";
        case 0.25f:
            return "darkred";
        case 0.5f:
            return "firebrick";
        case 2:
            return "forestgreen";
        case 4:
            return "darkgreen";
        default:
            return "none";
    }
}
}

