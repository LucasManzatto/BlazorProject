@page "/pokedex"
@using BlazorProject.Shared.DTO;
@using BlazorProject.Shared;
@inject IUriHelper UriHelper
@inject HttpClient Http

<ul class="nav">

</ul>
<div style="position: relative; height: 81vh; overflow-y: scroll;"
     data-spy="scroll"
     data-target="#navbar-generation"
     data-offset="0">
    <h2 class="text-center">National Pokédex</h2>
    <div class="row justify-content-around text-center" style="position: sticky; top: 0; z-index: 10; background: white">
            @*<a href=@($"pokedex#gen-{genNumber}")>Generation @genNumber</a>*@
            <NavLink href="pokedex#gen-1">Generation 1 </NavLink>
            <NavLink href="pokedex#gen-2">Generation 2 </NavLink>
            <NavLink href="pokedex#gen-3">Generation 3 </NavLink>
            <NavLink href="pokedex#gen-4">Generation 4 </NavLink>
            <NavLink href="pokedex#gen-5">Generation 5 </NavLink>
            <NavLink href="pokedex#gen-6">Generation 6 </NavLink>
            <NavLink href="pokedex#gen-7">Generation 7 </NavLink>
            <NavLink href="pokedex#gen-8">Generation 8 </NavLink>
            <div></div>
    </div>
    @foreach (var (gen, genNumber) in Pokemons.GroupBy(p => p.Generation).Select((value, i) => (value, i)))
    {
        //<h2 style="position: sticky; top: 0; z-index: 10; background: white" id="@($"gen-{genNumber + 1}")">@Format(gen.Key)</h2>
        @foreach (var row in gen.DivideList(8))
        {
            <div id="@($"gen-{genNumber + 1}")" class="row justify-content-center text-center align-items-center mb-3">
                @foreach (var pokemon in row)
                {
                    <div class="col">
                        <PokemonImage PokemonId=@pokemon.Id PokemonName=@pokemon.Name IsSmall=true Gen=@pokemon.Generation Types=@pokemon.Types />
                    </div>
                }
            </div>
        }
        <br />
    }
</div>

@code {

    [Parameter]
    private ICollection<PokemonList> Pokemons { get; set; } = new List<PokemonList>();

    protected override async Task OnInitAsync()
    {
        Pokemons = await Http.GetJsonAsync<List<PokemonList>>("api/Pokemons");
    }

    private static string Format(string gen)
    {
        var formattedString = "";

        var splitString = gen
            .Replace("-", " ")
            .Split(' ');
        splitString
            .ToList()
            .ForEach(word => formattedString += word == splitString.First() ? word.FirstCharToUpper() + " " : word.ToUpper() + " ");
        return formattedString;
    }

}