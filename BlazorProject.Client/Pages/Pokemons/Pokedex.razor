@page "/pokedex"
@using BlazorProject.Shared.DTO;
@using BlazorProject.Shared;
@inject IUriHelper UriHelper
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<div style="position: relative; height: 91.5vh; overflow-y: scroll; overflow-x:hidden"
     data-spy="scroll"
     data-target="#navbar-generation"
     data-offset="0">
    <div class="row">
        @*<div class="col-2">
            <h2>Filters</h2>
            <input bind-value-oninput="@searchInput" @oninput="@FilterPokemons" class="form-control" type="text" placeholder="Search..." />
        </div>*@
        <div class="col">
            <h2 class="text-center">National Pokédex</h2>
            <div class="row justify-content-around text-center" style="position: sticky; top: 0; z-index: 10; background: white">
                <button class="btn btn-link" @onclick=@(() => ScrollToElementId(gen1))>Generation 1 </button>
                <button class="btn btn-link" @onclick=@(() => ScrollToElementId(gen2))>Generation 2 </button>
                <button class="btn btn-link" @onclick=@(() => ScrollToElementId(gen3))>Generation 3 </button>
                <button class="btn btn-link" @onclick=@(() => ScrollToElementId(gen4))>Generation 4 </button>
                <button class="btn btn-link" @onclick=@(() => ScrollToElementId(gen5))>Generation 5 </button>
                <button class="btn btn-link" @onclick=@(() => ScrollToElementId(gen6))>Generation 6 </button>
                <button class="btn btn-link" @onclick=@(() => ScrollToElementId(gen7))>Generation 7 </button>
            </div>
            @{
                var generations = FilteredPokemons.GroupBy(p => p.Generation).ToList();
                @if (generations.Count == 7)
                {
                    <div @ref="gen1">
                        <PokedexGen Generation=generations.ElementAt(0) />
                    </div>
                    <div @ref="gen2">
                        <PokedexGen Generation=generations.ElementAt(1) />
                    </div>
                    <div @ref="gen3">
                        <PokedexGen Generation=generations.ElementAt(2) />
                    </div>
                    <div @ref="gen4">
                        <PokedexGen Generation=generations.ElementAt(3) />
                    </div>
                    <div @ref="gen5">
                        <PokedexGen Generation=generations.ElementAt(4) />
                    </div>
                    <div @ref="gen6">
                        <PokedexGen Generation=generations.ElementAt(5) />
                    </div>
                    <div @ref="gen7">
                        <PokedexGen Generation=generations.ElementAt(6) />
                    </div>
                }
            }
        </div>
    </div>

</div>

@code {

    [Parameter]
    private ICollection<PokemonList> Pokemons { get; set; } = new List<PokemonList>();

    private ElementRef gen1;
    private ElementRef gen2;
    private ElementRef gen3;
    private ElementRef gen4;
    private ElementRef gen5;
    private ElementRef gen6;
    private ElementRef gen7;
    private ElementRef gen8;

    private ICollection<PokemonList> FilteredPokemons { get; set; } = new List<PokemonList>();
    private string searchInput = "b";

    protected override async Task OnInitAsync()
    {
        Pokemons = await Http.GetJsonAsync<List<PokemonList>>("api/Pokemons");
        FilteredPokemons = Pokemons.Where(p => p.Name.ToLower().Contains(searchInput.ToLower())).ToList();
    }

    private async Task<bool> ScrollToElementId(ElementRef element)
    {
        return await JsRuntime.InvokeAsync<bool>("scrollToElementId", element);
    }

    private void FilterPokemons()
    {
        Console.WriteLine(searchInput);
        FilteredPokemons = Pokemons.Where(p => p.Name.ToLower().Contains(searchInput.ToLower())).ToList();
    }
}