@using BlazorProject.Client.Shared.Models
@using BlazorProject.Shared.DTO
@using BlazorProject.Shared
@inject HttpClient Http
@inherits RealmComponent<State>
@{var filteredItems = FilteredItems(SearchInput);}
<div class="dropdown">
    <input class="form-control dropdown-toggle"
           type="text"
           data-toggle="dropdown"
           value=@SearchInput
           placeholder=@(Items.Count > 0 ? "Gen " + GenNumber : "Loading...")
           @oninput="@(ui => SearchInput = (string)ui.Value)" />

    <div @ref="dropdown" class="dropdown-menu" style='max-height:200px; overflow:auto; left:initial; @(filteredItems.Count == 0 ? "display:none;" : "")' aria-labelledby="@GenNumber">
        @if(filteredItems.Count == 0)
        {
            <div class="row justify-content-center align-content-center">
                <div class="col">
                    <span class="text-center">No Match.</span>
                </div>
            </div>
        }
        @foreach (var item in filteredItems)
        {
            <button @onclick="@(() => SetPokemon(item))"
                    class="dropdown-item"
                    type="button">
                @item.Id - @item.Text
            </button>
        }
    </div>
</div>


@code {
    ElementRef dropdown;
    List<DropdownModel> Items { get; set; } = new List<DropdownModel>();
    [Parameter]
    int GenNumber { get; set; }
    public string SearchInput { get; set; } = "";

    private bool ShowDropdown { get; set; } = false;
    private int SelectedIndex { get; set; } = 0;
    private DropdownModel SelectedItem { get; set; }

    protected async override Task OnInitAsync()
    {
        Items = await CreateDropdownModelData(GenNumber);
    }

    async void SetPokemon(DropdownModel item)
    {
        ShowDropdown = false;
        SearchInput = $"{item.Id} - {item.Text}";
        var pokemon = await Http.GetJsonAsync<FullPokemon>($"api/Pokemons/{item.Id}");
        Dispatch(new Redux.Actions.Pokemon.Set(pokemon));
    }

    private async Task<List<DropdownModel>> CreateDropdownModelData(int id)
    {
        var list = await Http.GetJsonAsync<List<DropdownPokemon>>($"api/Generation/{id}/pokemons");
        List<DropdownModel> newList = new List<DropdownModel>();
        list.ForEach(item =>
            newList.Add(new DropdownModel { Id = item.Id, Text = item.Name.FirstCharToUpper() }));
        return newList;
    }
    private List<DropdownModel> FilteredItems(string input)
    {
        if (input == "")
        {
            return Items;
        }
        return Items.FindAll(p => p.Text.ToUpperInvariant()
                                   .Contains(input.ToUpperInvariant()) ||
                                   p.Id.ToString()
                                   .Contains(input));
    }
}
