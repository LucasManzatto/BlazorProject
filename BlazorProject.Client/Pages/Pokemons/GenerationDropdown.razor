@using BlazorProject.Client.Shared.Models
@using BlazorProject.Shared.DTO
@inject HttpClient Http
@inherits RealmComponent<State>
<input class="form-control" type="text" value=@SearchInput placeholder="Gen @GenNumber" @onfocus="@(() => ShowDropdown=true)" @oninput="@(ui => SearchInput = (string)ui.Value)" />
@if (ShowDropdown && Items.Count > 0)
{
    <div class="dropdown-menu" style='max-height:200px; overflow:auto; left:initial; display:inline;' aria-labelledby="@GenNumber">
        @foreach (var item in FilteredItems(SearchInput))
        {
            <button @onclick="@(() => SetPokemon(item))"
                    class="dropdown-item"
                    type="button">
                @item.Text
            </button>
        }
    </div>
}

@code {
    List<DropdownModel> Items { get; set; } = new List<DropdownModel>();
    [Parameter]
    int GenNumber { get; set; }
    public string SearchInput { get; set; } = "";

    private bool ShowDropdown { get; set; } = false;

    protected async override Task OnInitAsync()
    {
        Items = await CreateDropdownModelData(GenNumber);
    }

    async void SetPokemon(DropdownModel item)
    {
        ShowDropdown = false;
        SearchInput = item.Text;
        var pokemon = await Http.GetJsonAsync<FullPokemon>($"api/Pokemons/{item.Id}");
        Dispatch(new Redux.Actions.Pokemon.Set(pokemon));
    }

    private async Task<List<DropdownModel>> CreateDropdownModelData(int id)
    {
        var list = await Http.GetJsonAsync<List<DropdownPokemon>>($"api/Generation/{id}/pokemons");
        List<DropdownModel> newList = new List<DropdownModel>();
        list.ForEach(item =>
            newList.Add(new DropdownModel { Id = item.Id, Text = item.Name.FirstCharToUpper() }));
        return newList;
    }
    private void Filter()
    {

    }
    private List<DropdownModel> FilteredItems(string input)
    {
        return Items.FindAll(p => p.Text.ToUpperInvariant().Contains(SearchInput.ToUpperInvariant()));
    }

}
